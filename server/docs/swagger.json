{"openapi":"3.1.0","info":{"title":"FastAPI","version":"0.1.0"},"paths":{"/api/users/me":{"get":{"tags":["users"],"summary":"Get Me","description":"Получает информацию о текущем пользователе по API-ключу.\n\nФункция извлекает данные о пользователе с помощью переданного API-ключа,\nа затем формирует ответ с информацией о пользователе, включая его подписчиков и подписки.\n\n:param api_key: API-ключ пользователя.\n:return: Ответ в формате JSON с информацией о пользователе.","operationId":"get_me_api_users_me_get","parameters":[{"name":"api-key","in":"header","required":true,"schema":{"type":"string","title":"Api-Key"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/users/{user_id}":{"get":{"tags":["users"],"summary":"User By Id","description":"Получает информацию о текущем пользователе по его ID.\n\nФункция извлекает данные о пользователе с помощью переданного ID,\nа затем формирует ответ с информацией о пользователе, включая его подписчиков и подписки.\n\n:param user_id: ID пользователя.\n:return: Ответ в формате JSON с информацией о пользователе.","operationId":"user_by_id_api_users__user_id__get","parameters":[{"name":"user_id","in":"path","required":true,"schema":{"type":"integer","title":"User Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/users/{user_id}/follow":{"post":{"tags":["users"],"summary":"Post Users Follow","description":"Подписка на другого пользователя.\n\nФункция позволяет пользователю подписаться на другого пользователя по его ID.\nЕсли пользователь уже подписан, возвращается ошибка с кодом 400 и сообщением,\n{user.name} is already subscribed to {follow.name}\n\n:param user_id: ID пользователя, на которого нужно подписаться.\n:param api_key: API-ключ текущего пользователя, использующего функцию.\n:return: Ответ в формате JSON с результатом операции.\n:raises HTTPException: Если пользователь уже подписан на другого.","operationId":"post_users_follow_api_users__user_id__follow_post","parameters":[{"name":"user_id","in":"path","required":true,"schema":{"type":"integer","title":"User Id"}},{"name":"api-key","in":"header","required":true,"schema":{"type":"string","title":"Api-Key"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["users"],"summary":"Delete Users Follow","description":"Отписка от пользователя.\n\nФункция позволяет пользователю отписаться от другого пользователя по его ID.\nЕсли пользователь не подписан, возвращается ошибка с кодом 400 и сообщением,\n{user.name} doesn't follow {follow.name}\n\n:param user_id: ID пользователя, на которого нужно подписаться.\n:param api_key: API-ключ текущего пользователя, использующего функцию.\n:return: Ответ в формате JSON с результатом операции.\n:raises HTTPException: Если пользователь уже подписан на другого.","operationId":"delete_users_follow_api_users__user_id__follow_delete","parameters":[{"name":"user_id","in":"path","required":true,"schema":{"type":"integer","title":"User Id"}},{"name":"api-key","in":"header","required":true,"schema":{"type":"string","title":"Api-Key"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/tweets/":{"get":{"tags":["tweets"],"summary":"Tweets","description":"Получает ленту твитов для текущего пользователя.\n\nФункция извлекает все твиты из базы данных и формирует ленту твитов.\nЛента включает в себя информацию о контенте твитов, медиа-материалах\nи лайках. Для получения данных используется API-ключ текущего пользователя.\n\n:param api_key: API-ключ текущего пользователя, используемый для аутентификации.\n:return: Ответ в формате JSON с лентой твитов.","operationId":"tweets_api_tweets__get","parameters":[{"name":"api-key","in":"header","required":true,"schema":{"type":"string","title":"Api-Key"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"post":{"tags":["tweets"],"summary":"Post Tweets","description":"Создает новый твит.\n\nФункция создает новый твит с предоставленным контентом и\nприкрепленными медиа-материалами. Если твит не содержит\nданных, выбрасывается ошибка с кодом 400. После успешного\nдобавления твита в базу данных возвращается ответ с результатом\nоперации и ID созданного твита.\n\n:param tweet_data: Данные твита, включая текст твита и список ID медиа-материалов.\n:param api_key: API-ключ текущего пользователя, использующего функцию.\n:return: Ответ в формате JSON с результатом операции и ID созданного твита.\n:raises HTTPException: Если твит пустой (отсутствует контент).","operationId":"post_tweets_api_tweets__post","parameters":[{"name":"api-key","in":"header","required":true,"schema":{"type":"string","title":"Api-Key"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","title":"Tweet Data"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/tweets/{tweet_id}/likes":{"post":{"tags":["tweets"],"summary":"Like The Tweet","description":"Лайк твита.\n\nФункция позволяет пользователю поставить лайк на твит.\nЕсли пользователь уже поставил лайк, возвращается\nошибка с кодом 400. Если лайк еще не поставлен,\nон добавляется в базу данных.\n\n:param tweet_id: ID твита, на который ставится лайк.\n:param api_key: API-ключ текущего пользователя, использующего функцию.\n:return: Ответ в формате JSON с результатом операции.\n:raises HTTPException: Если твит уже был лайкнут пользователем.","operationId":"like_the_tweet_api_tweets__tweet_id__likes_post","parameters":[{"name":"tweet_id","in":"path","required":true,"schema":{"type":"integer","title":"Tweet Id"}},{"name":"api-key","in":"header","required":true,"schema":{"type":"string","title":"Api-Key"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["tweets"],"summary":"Delete Like On The Tweet","description":"Удаление лайка с твита.\n\nФункция позволяет пользователю удалить свой лайк с твита.\nЕсли лайк существует, он удаляется из базы данных.\nВ случае успешного выполнения возвращается ответ с\nрезультатом операции.\n\n:param tweet_id: ID твита, с которого удаляется лайк.\n:param api_key: API-ключ текущего пользователя, использующего функцию.\n:return: Ответ в формате JSON с результатом операции.\n:raises HTTPException: Если лайк не был найден.","operationId":"delete_like_on_the_tweet_api_tweets__tweet_id__likes_delete","parameters":[{"name":"tweet_id","in":"path","required":true,"schema":{"type":"integer","title":"Tweet Id"}},{"name":"api-key","in":"header","required":true,"schema":{"type":"string","title":"Api-Key"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/tweets/{tweet_id}":{"delete":{"tags":["tweets"],"summary":"Delete Tweet","description":"Удаление твита.\n\nФункция позволяет пользователю удалить твит,\nесли он является автором этого твита. При удалении\nтвита также удаляются связанные медиафайлы с сервера.\nЕсли пользователь не является автором твита, возвращается\nошибка с кодом 403.\n\n:param tweet_id: ID твита, который нужно удалить.\n:param api_key: API-ключ текущего пользователя, использующего функцию.\n:return: Ответ в формате JSON с результатом операции.\n:raises HTTPException: Если пользователь не является автором твита.","operationId":"delete_tweet_api_tweets__tweet_id__delete","parameters":[{"name":"tweet_id","in":"path","required":true,"schema":{"type":"integer","title":"Tweet Id"}},{"name":"api-key","in":"header","required":true,"schema":{"type":"string","title":"Api-Key"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/medias/":{"post":{"tags":["medias"],"summary":"Post Medias","description":"Загружает медиафайл на сервер.\n\nФункция позволяет пользователю загрузить медиафайл\nна сервер. Если файл не был загружен, возвращается\nошибка с кодом 400. Файл сохраняется в директории,\nпривязанной к пользователю, и генерируется уникальное\nимя для файла. После успешной загрузки медиафайл\nсохраняется в базе данных, и возвращается ответ с\nрезультатом операции и ID нового медиафайла.\n\n:param file: Загружаемый файл.\n:param api_key: API-ключ текущего пользователя, использующего функцию.\n:return: Ответ в формате JSON с результатом операции и ID загруженного медиафайла.\n:raises HTTPException: Если файл не был загружен.","operationId":"post_medias_api_medias__post","parameters":[{"name":"api-key","in":"header","required":true,"schema":{"type":"string","title":"Api-Key"}}],"requestBody":{"required":true,"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_post_medias_api_medias__post"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}}},"components":{"schemas":{"Body_post_medias_api_medias__post":{"properties":{"file":{"type":"string","format":"binary","title":"File"}},"type":"object","required":["file"],"title":"Body_post_medias_api_medias__post"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}}}}